{"version":3,"sources":["components/Input.js","components/Operator.js","App.js","components/Screen.js","components/Reset.js","components/Calculate.js","serviceWorker.js","index.js"],"names":["Input","value","updateDisplay","position","className","onClick","Operator","text","operation","App","useState","display","setDisplay","fadeEffect","setFadeEffect","resetDisplay","makeFadeEffect","setTimeout","calculate","toBeCalculated","replace","eval","toString","e","alert","checkError","result","sqr","sqrt","Math","factorial","number","Number","isInteger","i","percent","useEffect","document","addEventListener","event","key","forEach","item","arr","split","pop","join","Screen","Reset","Calculate","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e32ca41.chunk.js","sourcesContent":["import React from 'react'\n\nconst Input = ({ value, updateDisplay, position }) => {\n  return <div \n    className={position ? \"item \" + position : \"item\"}\n    onClick={() => updateDisplay(value)}\n    >{ value }</div>\n}\n\nexport default Input","import React from 'react'\n\nconst Operator = ({ text, operation }) => {\n  return <div \n    className=\"item\"\n    onClick={operation}\n    >{ text }</div>\n}\n\nexport default Operator","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport Screen from './components/Screen';\nimport Reset from './components/Reset';\nimport Operator from './components/Operator';\nimport Input from './components/Input';\nimport Calculate from './components/Calculate';\n\nfunction App() {\n  const [display, setDisplay] = useState('')\n  const [fadeEffect, setFadeEffect] = useState(false)\n\n  const updateDisplay =((value) => {\n    setDisplay(display => display + value)\n  })\n\n  const resetDisplay = () => {\n    setDisplay('')\n  }\n\n  const makeFadeEffect = () => {\n    setFadeEffect(true)\n    setTimeout(() => {\n      setFadeEffect(false)\n    }, 500);\n  }\n\n  const calculate = () => {\n    setDisplay(display => {\n      let toBeCalculated = display\n      toBeCalculated = toBeCalculated.replace(/×/g, \"*\")\n      toBeCalculated = toBeCalculated.replace(/÷/g, \"/\")\n      try {\n        // eslint-disable-next-line\n        return eval(toBeCalculated).toString()\n      } catch(e) {\n        alert(\"Ông phá máy rồi!\")\n        return ''\n      }\n    })\n\n    makeFadeEffect()\n  }\n\n  const checkError = (result) => {\n    if (!result) {\n      alert(\"Ông phá máy rồi!\")\n      setDisplay('')\n    } else {\n      setDisplay(result)\n    }\n  }\n\n  const sqr = () => {\n    // eslint-disable-next-line\n    let result = eval(display * display).toString()\n    checkError(result)\n    makeFadeEffect()\n  }\n\n  const sqrt = () => {\n    let result = Math.sqrt(display).toString()\n    checkError(result)\n    makeFadeEffect()\n  }\n\n  const factorial = () => {\n    let result = 1\n    let number = Number(display)\n\n    if (display === \"0\") setDisplay('1')\n    else if (number > 0 && Number.isInteger(number)) {\n      for (let i = 1; i <= number; i++) {\n        result *= i;\n      }\n      setDisplay(result.toString())\n    } else {\n      alert(\"Ông phá máy rồi!\");\n      setDisplay('')\n    }\n    makeFadeEffect()\n  }\n\n  const percent = () => {\n    let result = display / 100\n    checkError(result.toString())\n    makeFadeEffect()\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', function (event) {\n      // Deactivate spacebar\n      if (event.key === \" \") return\n\n      // keys that can be typed\n      const targetKeys = [\n        '+', '-', '*', '/', '.',\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'\n      ]\n\n      targetKeys.forEach(item => event.key === item && updateDisplay(event.key))\n\n      // When enter '='\n      if (event.key === \"=\" || event.key === 'Enter') calculate()\n\n      // When use Backspace\n      if (event.key === 'Backspace') {\n        setDisplay(display => {\n          let arr = display.split('');\n          arr.pop();\n          return arr.join('')\n        })\n      }\n    })\n  }, [])\n\n  return (\n    <div className=\"Calculator\">\n      <div className=\"Calculator-wrapper\">\n        <Screen display={display} fadeEffect={fadeEffect} />\n        <Reset resetDisplay={resetDisplay} />\n        <Operator text=\"x²\" operation={sqr} />\n        <Operator text=\"x!\" operation={factorial} />\n        <Operator text=\"√x\" operation={sqrt} />\n        <Operator text=\"x%\" operation={percent} />\n        <Input value=\"7\" updateDisplay={updateDisplay} />\n        <Input value=\"8\" updateDisplay={updateDisplay} />\n        <Input value=\"9\" updateDisplay={updateDisplay} />\n        <Input value=\"÷\" updateDisplay={updateDisplay} />\n        <Input value=\"4\" updateDisplay={updateDisplay} />\n        <Input value=\"5\" updateDisplay={updateDisplay} />\n        <Input value=\"6\" updateDisplay={updateDisplay} />\n        <Input value=\"×\" updateDisplay={updateDisplay} />\n        <Input value=\"1\" updateDisplay={updateDisplay} />\n        <Input value=\"2\" updateDisplay={updateDisplay} />\n        <Input value=\"3\" updateDisplay={updateDisplay} />\n        <Input value=\"-\" updateDisplay={updateDisplay} />\n        <Input value=\"0\" updateDisplay={updateDisplay} position=\"bottom-left\" />\n        <Input value=\".\" updateDisplay={updateDisplay} />\n        <Calculate calculate={calculate} />\n        <Input value=\"+\" updateDisplay={updateDisplay} position=\"bottom-right\" />\n      </div>\n      <div className=\"Calculator-guide\">Bạn có thể dùng bàn phím để nhập phép tính</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport './Screen.css'\n\nconst Screen = ({ display, fadeEffect }) => {\n  return (\n    <div className=\"Screen top-left\">\n      <div className={fadeEffect ? \"fadeEffect\" : \"\"}>{ display }</div>\n    </div>\n  )\n}\n\nexport default Screen","import React from 'react'\n\nconst Reset = ({ resetDisplay }) => {\n  return <div \n    className=\"item top-right\"\n    onClick={resetDisplay}\n    >AC</div>\n}\n\nexport default Reset","import React from 'react'\n\nconst Calculate = ({ calculate }) => {\n  return <div \n    className=\"item\"\n    onClick={calculate}\n    >=</div>\n}\n\nexport default Calculate","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}